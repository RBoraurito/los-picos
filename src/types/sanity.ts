/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: string;
  sections?: Array<{
    title?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "hero";
    _key: string;
  } | {
    title?: string;
    text?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    variant?: "merge-with-top" | "default";
    _type: "content-w-image";
    _key: string;
  } | {
    title?: string;
    cards?: Array<{
      title?: string;
      content?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      cta?: Link;
      _type: "card";
      _key: string;
    }>;
    bgImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    variant?: "default";
    _type: "cards-grid";
    _key: string;
  } | {
    internalName?: string;
    sections?: Array<{
      title?: string;
      text?: string;
      cta?: Array<{
        _key: string;
      } & Link>;
      _type: "section";
      _key: string;
    }>;
    _type: "double-content";
    _key: string;
  } | {
    internalName?: string;
    title?: string;
    text?: string;
    bgImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "featured-content";
    _key: string;
  } | {
    title?: string;
    variant?: "default";
    _type: "title";
    _key: string;
  }>;
};

export type GlobalConfig = {
  _id: string;
  _type: "globalConfig";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  active?: boolean;
  header?: {
    logo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    links?: Array<{
      _key: string;
    } & Link>;
    cta?: Link;
  };
  footer?: {
    links?: Array<{
      _key: string;
    } & Link>;
    socialLinks?: Array<{
      _key: string;
    } & Link>;
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Link = {
  _type: "link";
  title?: string;
  type?: "internal" | "external" | "download";
  url?: string;
  icon?: "" | "link" | "download" | "instagram" | "facebook" | "youtube";
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | Page | GlobalConfig | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Link;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/queries/global-config.ts
// Variable: globalConfigQuery
// Query: *[_type == 'globalConfig' && active == true][0]
export type GlobalConfigQueryResult = {
  _id: string;
  _type: "globalConfig";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  active?: boolean;
  header?: {
    logo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    links?: Array<{
      _key: string;
    } & Link>;
    cta?: Link;
  };
  footer?: {
    links?: Array<{
      _key: string;
    } & Link>;
    socialLinks?: Array<{
      _key: string;
    } & Link>;
  };
} | null;

// Source: ./src/queries/page.ts
// Variable: getAllPagesQuery
// Query: *[_type == "page"]{  _id,  slug,}
export type GetAllPagesQueryResult = Array<{
  _id: string;
  slug: string | null;
}>;
// Variable: getPageQuery
// Query: *[_type == "page" && slug == $slug][0]{  _id,  title,  slug,  sections[]{    _id,    title,    slug,    ...,    "id": _key  }}
export type GetPageQueryResult = {
  _id: string;
  title: string | null;
  slug: string | null;
  sections: Array<{
    _id: null;
    title?: string;
    slug: null;
    cards?: Array<{
      title?: string;
      content?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      cta?: Link;
      _type: "card";
      _key: string;
    }>;
    bgImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    variant?: "default";
    _type: "cards-grid";
    _key: string;
    id: string;
  } | {
    _id: null;
    title?: string;
    slug: null;
    text?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    variant?: "default" | "merge-with-top";
    _type: "content-w-image";
    _key: string;
    id: string;
  } | {
    _id: null;
    title: null;
    slug: null;
    internalName?: string;
    sections?: Array<{
      title?: string;
      text?: string;
      cta?: Array<{
        _key: string;
      } & Link>;
      _type: "section";
      _key: string;
    }>;
    _type: "double-content";
    _key: string;
    id: string;
  } | {
    _id: null;
    title?: string;
    slug: null;
    internalName?: string;
    text?: string;
    bgImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "featured-content";
    _key: string;
    id: string;
  } | {
    _id: null;
    title?: string;
    slug: null;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "hero";
    _key: string;
    id: string;
  } | {
    _id: null;
    title?: string;
    slug: null;
    variant?: "default";
    _type: "title";
    _key: string;
    id: string;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'globalConfig' && active == true][0]": GlobalConfigQueryResult;
    "*[_type == \"page\"]{\n  _id,\n  slug,\n}": GetAllPagesQueryResult;
    "*[_type == \"page\" && slug == $slug][0]{\n  _id,\n  title,\n  slug,\n  sections[]{\n    _id,\n    title,\n    slug,\n    ...,\n    \"id\": _key\n  }\n}": GetPageQueryResult;
  }
}
